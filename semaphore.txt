import java.util.concurrent.Semaphore;

public class Main {
    static Semaphore mutex = new Semaphore(1); // Controls access to readCount
    static Semaphore wrt = new Semaphore(1); // Controls writing access
    static int readCount = 0;
    static String message = "Hello";

    static class Reader implements Runnable {
        public void run() {
            try {
                // A reader wants to read, but must wait if a writer is writing
                mutex.acquire();
                readCount++;
                if (readCount == 1) {
                    wrt.acquire(); // Block writers
                }
                mutex.release();

                // Reading section
                System.out.println("Reading: " + message);
                Thread.sleep(1500);
                System.out.println("Finished Reading!");

                // Done reading, update readCount and release the writing lock if necessary
                mutex.acquire();
                readCount--;
                if (readCount == 0) {
                    wrt.release(); // Allow writers
                }
                mutex.release();
            } catch (InterruptedException e) {
                System.out.println(e.getMessage());
            }
        }
    }

    static class Writer implements Runnable {
        public void run() {
            try {
                wrt.acquire(); // A writer must wait if another writer or reader is active
                message = "Good Morning";
                System.out.println("Writing: " + message);
                Thread.sleep(1500);
                System.out.println("Finished Writing");
                wrt.release(); // Done writing, release the writing lock
            } catch (InterruptedException e) {
                System.out.println(e.getMessage());
            }
        }
    }

    public static void main(String[] args) throws Exception {
        Reader reader = new Reader();
        Writer writer = new Writer();

        Thread reader1 = new Thread(reader);
        Thread reader2 = new Thread(reader);
        Thread reader3 = new Thread(reader);
        Thread writer1 = new Thread(writer);
        Thread writer2 = new Thread(writer);
        Thread writer3 = new Thread(writer);

        reader1.start();
        writer1.start();
        reader2.start();
        writer2.start();
        reader3.start();
        writer3.start();
    }
}