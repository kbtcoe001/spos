************************************ FCFS *********************************
import java.util.Scanner;
public class fcfs {
	static void firstcome()
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the no of process");
		int n=sc.nextInt();
		int arrival[]=new int[n];
		int burst[]=new int[n];
		int waiting[]=new int[n];
		int turnaround[]=new int[n];
		System.out.println("Enter the arrival and burst time");
		for(int i=0;i<n;i++)
		{
			System.out.println("Process "+(i+1)+" Arrival time");
			arrival[i]=sc.nextInt();
			System.out.println("Process "+(i+1)+" Burst time");
			burst[i]=sc.nextInt();

		}
		int Twaiting=0;
		int Tturnaround=0;
		for(int i=0;i<n;i++)
		{
			if(i==0)
				waiting[i]=0;
			else {
				waiting[i]=(waiting[i-1]+burst[i-1]+arrival[i-1])-arrival[i];
			}
			turnaround[i]=waiting[i]+burst[i];
			Twaiting+=waiting[i];
			Tturnaround+=turnaround[i];
		}
		System.out.println("Process\t\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time");
		for(int i=0;i<n;i++)
		{
			System.out.println("Process"+(i+1)+"\t\t"+arrival[i]+"\t\t"+burst[i]+"\t\t"+waiting[i]+"\t\t"+turnaround[i]);
			
		}
		double avgw=(double)Twaiting/n;
		double avgt=(double)Tturnaround/n;	
		System.out.println("Average waiting time ="+avgw);
		System.out.println("Average turnaround time ="+avgt);
		
	}
	public static void main(String[] args) {
		firstcome();
		
	}

}

******************************** SGF ***************************
import java.util.Scanner;
class Process 
{ 
    int pid; // Process ID 
    int bt; // Burst Time 
    int art; // Arrival Time 
      
    public Process(int pid, int bt, int art) 
    { 
        this.pid = pid; 
        this.bt = bt; 
        this.art = art; 
    } 
} 
  
public class SJFPreemptive  
{ 
   
    static void findWaitingTime(Process proc[], int n, 
                                     int wt[]) 
    { 
        int rt[] = new int[n]; 
       
        // Copy the burst time into rt[] 
        for (int i = 0; i < n; i++) 
            rt[i] = proc[i].bt; 
       
        int complete = 0, t = 0, minm = Integer.MAX_VALUE; 
        int shortest = 0, finish_time; 
        boolean check = false; 
       
        // Process until all processes gets 
        // completed 
        while (complete != n) { 
       
            // Find process with minimum 
            // remaining time among the 
            // processes that arrives till the 
            // current time` 
            for (int j = 0; j < n; j++)  
            { 
                if ((proc[j].art <= t) && 
                  (rt[j] < minm) && rt[j] > 0) { 
                    minm = rt[j]; 
                    shortest = j; 
                    check = true; 
                } 
            } 
       
            if (check == false) { 
                t++; 
                continue; 
            } 
       
            // Reduce remaining time by one 
            rt[shortest]--; 
       
            // Update minimum 
            minm = rt[shortest]; 
            if (minm == 0) 
                minm = Integer.MAX_VALUE; 
       
            // If a process gets completely 
            // executed 
            if (rt[shortest] == 0) { 
       
                // Increment complete 
                complete++; 
                check = false; 
       
                // Find finish time of current 
                // process 
                finish_time = t + 1; 
       
                // Calculate waiting time 
                wt[shortest] = finish_time - 
                             proc[shortest].bt - 
                             proc[shortest].art; 
       
                if (wt[shortest] < 0) 
                    wt[shortest] = 0; 
            } 
            // Increment time 
            t++; 
        } 
    } 
       
    // Method to calculate turn around time 
    static void findTurnAroundTime(Process proc[], int n, 
                            int wt[], int tat[]) 
    { 
        // calculating turnaround time by adding 
        // bt[i] + wt[i] 
        for (int i = 0; i < n; i++) 
            tat[i] = proc[i].bt + wt[i]; 
    } 
       
    // Method to calculate average time 
    static void findavgTime(Process proc[], int n) 
    { 
        int wt[] = new int[n], tat[] = new int[n]; 
        int  total_wt = 0, total_tat = 0; 
       
        // Function to find waiting time of all 
        // processes 
        findWaitingTime(proc, n, wt); 
       
        // Function to find turn around time for 
        // all processes 
        findTurnAroundTime(proc, n, wt, tat); 
       
        // Display processes along with all 
        // details 
        System.out.println("Processes " + 
                           " Burst time " + 
                           " Waiting time " + 
                           " Turn around time"); 
       
        // Calculate total waiting time and 
        // total turnaround time 
        for (int i = 0; i < n; i++) { 
            total_wt = total_wt + wt[i]; 
            total_tat = total_tat + tat[i]; 
            System.out.println(" " + proc[i].pid + "\t\t"
                             + proc[i].bt + "\t\t " + wt[i] 
                             + "\t\t" + tat[i]); 
        } 
       
        System.out.println("Average waiting time = " + 
                          (float)total_wt / (float)n); 
        System.out.println("Average turn around time = " + 
                           (float)total_tat / (float)n); 
    } 
      
    // Driver Method 
    public static void main(String[] args) 
    { 
         Process proc[] = { new Process(1, 6, 1),  
                            new Process(2, 8, 1), 
                            new Process(3, 7, 2),  
                            new Process(4, 3, 3)}; 
          
         findavgTime(proc, proc.length); 
    } 
} 

************************************************* Round Robin *************************************
import java.util.Scanner;
public class RoundRobin
{
    static void findWaitingTime(int processes[], int n,int bt[], int wt[], int quantum)
    {
        int rem_bt[] = new int[n];
        for (int i = 0 ; i < n ; i++)
            rem_bt[i] =  bt[i];
        int t = 0;
        while(true)
        {
            boolean done = true;
            for (int i = 0 ; i < n; i++)
            {
                if (rem_bt[i] > 0)
                {
                    done = false; 
                    if (rem_bt[i] > quantum)
                    {
                        t += quantum;
                        rem_bt[i] -= quantum;
                    }
                    else
                    { 
                        t = t + rem_bt[i];
                        wt[i] = t - bt[i];
                        rem_bt[i] = 0;
                    }
                }
            }
      
            if (done == true)
              break;
        }
    }
    static void findTurnAroundTime(int processes[], int n,int bt[], int wt[], int tat[])
    {
        
        for (int i = 0; i < n ; i++)
            tat[i] = bt[i] + wt[i];
    }
    
    static void findavgTime(int processes[], int n, int bt[],int quantum)
    {
        int wt[] = new int[n], tat[] = new int[n];
        int total_wt = 0, total_tat = 0;
      
        findWaitingTime(processes, n, bt, wt, quantum);
        findTurnAroundTime(processes, n, bt, wt, tat);
        System.out.println("PN " + "\tBT " + "\tWT " + "\tTAT");
        for (int i=0; i<n; i++)
        {
            total_wt = total_wt + wt[i];
            total_tat = total_tat + tat[i];
            System.out.println("P"+(i+1) + "\t" + bt[i] +"\t " +
                              wt[i] +"\t" + tat[i]);
        }
        System.out.println("Average waiting time = " +(float)total_wt / (float)n);
        System.out.println("Average turn around time = " +(float)total_tat / (float)n);
    }
    
		public static void main(String[] args)
		{
		    int processes[] = { 1, 2, 3};
		    int n = processes.length;
		    int burst_time[] = {10, 5, 8};
		    int quantum = 2;
		    findavgTime(processes, n, burst_time, quantum);
		}

}
